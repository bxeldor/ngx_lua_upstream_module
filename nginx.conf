
#user  nobody;
worker_processes  1;

error_log  logs/error.log  debug;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


#run on master process

#master_process off;


events {
    worker_connections  1024;
}

# load modules compiled as Dynamic Shared Object (DSO)
#
#dso {
#    load ngx_http_fastcgi_module.so;
#    load ngx_http_rewrite_module.so;
#}




http {
#     upstream foo.com {
#       server 127.0.0.1 fail_timeout=53 weight=4 max_fails=100;
#        server agentzh.org:81;
#    }

    upstream bar {
        #ip_hash;
       #consistent_hash $request_uri; #$request_uri; # $remote_addr
       consistent_hash $remote_addr;
#        server 127.0.0.1:80   weight=2;
#        server 127.0.0.1:83   weight=1;
	server 127.0.0.1:81   weight=1;
        check  interval=3000 rise=2 fall=2 timeout=1000;
#    	server 127.0.0.1:80   fail_timeout=10  max_fails=1   weight=100;
#    	server 127.0.0.1:81   weight=2;
    }

    lua_package_path "/usr/local/nginxgdb/sbin/?.lua;;";
   # lua_code_cache off ; 


    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       8044;
        server_name  localhost;
# sample output for the following /upstream interface:
# upstream foo.com:
#     addr = 127.0.0.1:80, weight = 4, fail_timeout = 53, max_fails = 100
#     addr = 106.187.41.147:81, weight = 1, fail_timeout = 10, max_fails = 1
# upstream bar:
#


#add a proxy_pass

location  /test {
    proxy_pass    http://127.0.0.1:81/;
}

location  /proxy {
    proxy_pass    http://bar/;
}

location /status {
    check_status;
    access_log off;
}

location = /upstreams {
            default_type text/plain;
            content_by_lua '
		
                local concat = table.concat
                local upstream = require "ngx.upstream"
                local get_servers = upstream.get_servers
                local get_upstreams = upstream.get_upstreams
		local add_server = upstream.add_server

		local hello = upstream.say_hello()
		ngx.print(hello)
		ngx.print("\\n")

		--local err = add_server("bar","127.0.0.5:8080")
		--ngx.print(err)
		--ngx.print("\\n")

                local us = get_upstreams()
                for _, u in ipairs(us) do
                    ngx.say("upstream ", u, ":")
                    local srvs, err = get_servers(u)
                    if not srvs then
                        ngx.say("failed to get servers: ",err)
                    else
                        for _, srv in ipairs(srvs) do
                            local first = true
                            for k, v in pairs(srv) do
                                if first then
                                    first = false
                                    ngx.print("    ")
                                else
                                    ngx.print(", ")
                                end
                                if type(v) == "table" then
                                    ngx.print(k, " = {", concat(v, ", "), "}")
                                else
                                    ngx.print(k, " = ", v)
                                end
                            end
                            ngx.print("\\n")
                        end
                    end
                end
            ';
        }


	location   /get_servers {
            	default_type text/plain;
            	content_by_lua '
                	local concat = table.concat
                	local upstream = require "ngx.upstream"
                	local get_servers = upstream.get_servers
                	local get_upstreams = upstream.get_upstreams
			--local add_server = upstream.add_server

			local args =  ngx.req.get_uri_args()
			local upstream_name;
			for key, val in pairs(args) do
                		if type(val) == "table" then
                    			ngx.say(key, ": ", table.concat(val, ", "))
					upstream_name = val
                		else
                    			ngx.say(key, ": ", val)
					upstream_name = val
            			end	
			end

                    	ngx.say("upstream ", upstream_name, ":")
                    	local srvs, err = get_servers(upstream_name)
                    	if not srvs then
                        	ngx.say("failed to get servers in upstream ", upstream_name)
                    	else
                        	for _, srv in ipairs(srvs) do
                            		local first = true
                            		for k, v in pairs(srv) do
                                		if first then
                                    			first = false
                                    			ngx.print("    ")
                                		else
                                    			ngx.print(", ")
                                		end
                                		if type(v) == "table" then
                                    			ngx.print(k, " = {", concat(v, ", "), "}")
                                		else
                                    			ngx.print(k, " = ", v)
                                		end
                            		end
                       			ngx.print("\\n")
				end
			end
			

		';
		
	}


	location  /add_server {

            	default_type text/plain;
            	content_by_lua '

                	local concat = table.concat
                	local upstream = require "ngx.upstream"
                	local get_servers = upstream.get_servers
                	local get_upstreams = upstream.get_upstreams
			local add_server = upstream.add_server

			local args =  ngx.req.get_uri_args()
			local upstream_name

			upstream_name = args["upstream"]
			local server_ip = args["ip"]
			local server_port = args["port"]
			local weight = 2
			local max_fails = 10
			local fail_timeout = 10


                    	-- ngx.say("upstream ", ":", upstream_name )
			-- ngx.say("server ", ":", server_ip..":"..server_port)
		
			local str,err = add_server("bar",server_ip..":"..server_port,weight,max_fails,fail_timeout)
                    	if not str then
                            ngx.say("the server is exist :",server_ip..":"..server_port)
                            -- ngx.say(str)
			end
			ngx.print("\\n----------------------------\\n")

                    	local srvs, err = get_servers(upstream_name)
                    	if not srvs then
                        	ngx.say("failed to get servers: ",err)
                    	else
                         	for _, srv in ipairs(srvs) do
                            		local first = true
                           		for k, v in pairs(srv) do
                                		if first then
                                    			first = false
                                    			ngx.print("    ")
                                		else
                                    			ngx.print(", ")
                                		end
                                		if type(v) == "table" then
                                    			ngx.print(k, " = {", concat(v, ", "), "}")
                                		else
                                    			ngx.print(k, " = ", v)
                                		end
                            		end
                        		ngx.print("\\n")
				end
			end


		';
	}

      location /remove_server {
          content_by_lua '
              local upstream = require "ngx.upstream"
              local remove_server = upstream.remove_server
	      local args =  ngx.req.get_uri_args()
	      upstream_name = args["upstream"]
	      local server_ip = args["ip"]
	      local server_port = args["port"]

              local ser, err = remove_server(upstream_name,server_ip..":"..server_port)
              if not ser then
                 ngx.say("failed to remove server: ", err)
                 return
              end 
           ';  
       } 
  
        location  /add_peer {

            	default_type text/plain;
            	content_by_lua '

                	local concat = table.concat
                	local upstream = require "ngx.upstream"
                	-- local get_servers = upstream.get_servers
                	-- local get_upstreams = upstream.get_upstreams
			local add_peer = upstream.add_peer

			local args =  ngx.req.get_uri_args()
			local upstream_name

			upstream_name = args["upstream"]
			local server_ip = args["ip"]
			local server_port = args["port"]


                    	--ngx.say("upstream ", ":", upstream_name )
		        ngx.say("server ", ":", server_ip..":"..server_port)
		
			local str,err = add_peer(upstream_name,server_ip..":"..server_port)
			--	ngx.say(str,err)
			if not str then
				ngx.say(err)
			end
			-- ngx.print(err)
			ngx.print("\\n----------------------------\\n")
                        --[[
                    	local srvs, err = get_servers(upstream_name)
                    	if not srvs then
                        	ngx.say("failed to get servers in upstream ", upstream_name)
                    	else
                         	for _, srv in ipairs(srvs) do
                            		local first = true
                           		for k, v in pairs(srv) do
                                		if first then
                                    			first = false
                                    			ngx.print("    ")
                                		else
                                    			ngx.print(", ")
                                		end
                                		if type(v) == "table" then
                                    			ngx.print(k, " = {", concat(v, ", "), "}")
                                		else
                                    			ngx.print(k, " = ", v)
                                		end
                            		end
                        		ngx.print("\\n")
				end
			end
                    ]]

		';
	}


      location /remove_peer {
          content_by_lua '
              local upstream = require "ngx.upstream"
              local remove_peer = upstream.remove_peer
	      local args =  ngx.req.get_uri_args()
	      upstream_name = args["upstream"]
	      local server_ip = args["ip"]
	      local server_port = args["port"]

              local ser, err = remove_peer(upstream_name,server_ip..":"..server_port)
              if not ser then
                 ngx.say("failed to remove peer: ", err)
                 return
              end 
           ';  
       } 

#	location  /chash_add_peer {
#
#            	default_type text/plain;
#            	content_by_lua '
#
#                	local concat = table.concat
#                	local upstream = require "ngx.upstream"
#                	-- local get_servers = upstream.get_servers
#                	-- local get_upstreams = upstream.get_upstreams
#			local chash_add_peer = upstream.chash_add_peer
#
#			local args =  ngx.req.get_uri_args()
#			local upstream_name
#
#			--upstream_name = args["upstream"]
#			local server_ip = args["ip"]
#			local server_port = args["port"]
#
#
#                    	--ngx.say("upstream ", ":", upstream_name )
#		        ngx.say("server ", ":", server_ip..":"..server_port)
#		
#			local str,err = chash_add_peer(server_ip..":"..server_port)
#			--	ngx.say(str,err)
#			if not str then
#				ngx.say(err)
#			end
#			-- ngx.print(err)
#			ngx.print("\\n----------------------------\\n")
#                        --[[
#                    	local srvs, err = get_servers(upstream_name)
#                    	if not srvs then
#                        	ngx.say("failed to get servers in upstream ", upstream_name)
#                    	else
#                         	for _, srv in ipairs(srvs) do
#                            		local first = true
#                           		for k, v in pairs(srv) do
#                                		if first then
#                                    			first = false
#                                    			ngx.print("    ")
#                                		else
#                                    			ngx.print(", ")
#                                		end
#                                		if type(v) == "table" then
#                                    			ngx.print(k, " = {", concat(v, ", "), "}")
#                                		else
#                                    			ngx.print(k, " = ", v)
#                                		end
#                            		end
#                        		ngx.print("\\n")
#				end
#			end
#                    ]]
#
#		';
#	}


 location /get_primary_peer {
        content_by_lua '
            local upstream = require "ngx.upstream"
            local ljson = require "ljson"
            us = upstream.get_upstreams()
            --for _, u in ipairs(us) do
            local peers, err = upstream.get_primary_peers("bar")
            if not peers then
                ngx.say("failed to get primary peers: ", err)
                return
            end
            ngx.say(ljson.encode(peers))
            -- end
            -- for k, v in pairs(peers) do
            --    ngx.say(k , " = " ,  v)
            -- end
        ';

  }


 location /get_backup_peer {
        content_by_lua '
            local upstream = require "ngx.upstream"
            local ljson = require "ljson"
            us = upstream.get_upstreams()
            for _, u in ipairs(us) do
                local peers, err = upstream.get_backup_peers(u)
                if not peers then
                    ngx.say("failed to get peers: ", err)
                    return
                end
                ngx.say(ljson.encode(peers))
            end
            -- for k, v in pairs(peers) do
            --    ngx.say(k , " = " ,  v)
            -- end
        ';
    }



  location /set_peer_down {
        content_by_lua '
            local upstream = require "ngx.upstream"
            local ljson = require "ljson"
            local u = "bar"
            local ok, err = upstream.set_peer_down(u, false, 0, true)
            if not ok then
                ngx.say("failed to set peer down: ", err)
                return
            end 
            local peers, err = upstream.get_primary_peers(u)
            if not peers then
                ngx.say("failed to get peers: ", err)
                return
            end 
            ngx.say(ljson.encode(peers))
        ';  
    }   


	

        #charset koi8-r;

	#--- request
    	    #GET /add_server?upstream=bar&ip=127.0.0.9&port=12855
	#--- response_body
    	    #fail_timeout = 10, addr = 127.0.0.2:80, max_fails = 1, weight = 1
    	    #fail_timeout = 10, addr = 127.0.0.9:12855, max_fails = 10, weight = 1


        #access_log  logs/host.access.log  main;

        location /123 {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
